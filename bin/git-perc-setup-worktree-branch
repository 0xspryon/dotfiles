#!/usr/bin/env bash

msg() {
  echo >&2 -e "${1-}"
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

# @todo : initialize source branch with a user provided value
# and fallback to "develop", so that we can use the script
# to setup feature branches sources from other feature branches as well.
source_branch="develop"
current_branch=$(git symbolic-ref --short HEAD)

run_validations() {
  if [[ $current_branch == "develop" ]] || [[ $current_branch == "main" ]]; then
    msg "${RED}Perc setup woktree current_branch should be ran only in feature branches${NOFORMAT}"
  fi
  # @todo : check that the current branch starts with "feature/"
  # @todo: if (!$current_branch.startsWith("feature")) { throw new Error("Not a feature branch")}
}

copy_files_over() {
  echo "source branch: $source_branch"
  echo "current branch: $current_branch"
  source_branch_path="../$source_branch/"
  source_api_app_data_path="api-app/data"
  source_api_app_node_modules="api-app/node_modules"
  source_getpercs_app_node_modules="getpercs-app/node_modules"
  source_shopify_apps_node_modules="shopify-apps/node_modules"
  source_shopify_apps_percs_engage_node_modules="shopify-apps/percs-engage/node_modules"
  files_to_copy=($source_api_app_data_path $source_api_app_node_modules $source_getpercs_app_node_modules $source_shopify_apps_node_modules $source_shopify_apps_percs_engage_node_modules)


  # @todo copy over the node modules of all the sub projects of shopify app

  echo "--------------------------------------------------"
  for path in  ${files_to_copy[@]}; do
    source_path="$source_branch_path$source_api_app_data_path"

    # check that the folder/file to be copied exists
    if ! [ -d $source_path ]; then
      msg "${YELLOW}$source_path is missing. Skipping${NOFORMAT}"
      echo "--------------------------------------------------"
      continue
    fi

    # check that the folder/file does not exist at the destination prior to copying
    if [ -d $path ]; then
      msg "${YELLOW}$source_path exists in $current_branch. Skipping${NOFORMAT}"
      echo "--------------------------------------------------"
      continue
    fi

    echo "copying $source_path to ./$path"
    cp -r $source_path "./$path"
    msg "${GREEN}Copied $source_api_app_data_path successfuly${NOFORMAT}"
    echo "--------------------------------------------------"
  done
  msg "${GREEN}Execution ended without any blocking errors"
}

# run the defined functions
setup_colors
run_validations
copy_files_over
